////////////////////////////////////////////////////////////////////////////////
//  Utililties:
//    backbone tool set for generating data, learning, and incorporating noises
//
////////////////////////////////////////////////////////////////////////////////

var generate_bstr = function (len, p) {
 return repeat(len, function() { return flip(p) } );
};

var _step_learn = function (prior, obs, cost, default_p, forward_noise) {
 return function () {
   var sam = sample(prior);
   var p = sam;// > 0.999 ? 0.999 : sam < 0.001 ? 0.001 : sam;
   observe(Bernoulli({p: p}), obs);
   return forward_noise(p, {cost:cost, default_p:default_p, obs:obs, prior:prior});
 };
};

var constant_cost_learn = function (prior, dat, cost, forward_noise) {
  var constant_cost_learn_helper = function (prior, dat, cost, forward_noise, default_p) {
    var opts = {method:"rejection", samples:1000};
    if (dat.length == 0) return prior;
    var post = Infer(opts, _step_learn(prior, dat[0], cost, default_p, forward_noise));
    return constant_cost_learn_helper(post, dat.slice(1), cost, forward_noise, default_p);
  }
  return constant_cost_learn_helper(prior, dat, cost, forward_noise, prior);
}

var cont_expectation = function (p, fn, n) {
  return sum(repeat(n, function () {return fn(sample(p))})) / n;
}

////////////////////////////////////////////////////////////////////////////////
//
// Noise functions
//
////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
var _reset = function (p, d) {
  return flip(1/(d.cost+1)) ? sample(d.default_p) : p;
}

// Using this one
var _false_mem = function (p, d) {
  flip(1/(d.cost+1)) ? observe(Bernoulli({p: p}), !(d.obs)) : {}
  return p
}

var logit = function (x) { return Math.log(x/(1-x)) };
var logit2 = function (x) { var s = Math.log(x/(1-x)); return s*s };

var _compress_LogitNormal = function (p, d) {
  var exp = cont_expectation(p, logit, 5000);
  var variance = cont_expectation(p, logit2, 5000) - exp * exp;
  return LogitNormal({mu:exp, sigma:variance, a:0, b:1})
}

var _logn_exp_drift = function (p, d) {
  var exp = cont_expectation(p, logit, 5000);
  var variance = cont_expectation(p, logit2, 5000) - exp * exp;
  var drifted = sample(Gaussian({mu:exp, sigma:(1/d.cost+1)*variance}))
  return LogitNormal({mu:drifted, sigma:variance, a:0, b:1})
}

var _logn_var_drift = function (p, d) {
  var exp = cont_expectation(p, logit, 5000);
  var variance = cont_expectation(p, logit2, 5000) - exp * exp;
  var drift = sample(Gaussian({mu:0, sigma:(1/d.cost+1)}))
  return LogitNormal({mu:exp, sigma:variance * Math.exp(drift), a:0, b:1})
}

var _logn_small_sample = function (p, d) {
  var exp = cont_expectation(p, logit, d.cost+1);
  var variance = (cont_expectation(p, logit2, d.cost+1) - exp*exp) * Math.sqrt(1+1/d.cost);
  return LogitNormal({mu:exp, sigma:variance, a:0, b:1})
}

////////////////////////////////////////////////////////////////////////////////
//
// Experiment section
//
////////////////////////////////////////////////////////////////////////////////

// evaluation
var eval_binomial = function(p, post, samples) {
  var num_actual = sample(Binomial({p:p, n:samples}));
  var pr = expectation(post);// > 0.999 ? 0.999 : post < 0.001 ? 0.001 : post;
  var num_pred = sample(Binomial({p:pr, n:samples}));
  // console.log(num_actual, num_pred);
  var e = ((num_pred - num_actual) / (samples));
  return e * e;
}

var actual_p = 0.8;
var pp = LogitNormal({mu:0, sigma:1.5, a:0, b:1});

// viz.hist(posf)

var test_cost = function (cost) {
  var d = generate_bstr(20, actual_p);
  var posf = constant_cost_learn(pp, d, cost, _logn_exp_drift);
  // viz.hist(posf)
  // print(cost)
  // print(eval_binomial(actual_p, posf, 5000))
  // print("OK!")
  var result = cost + 100 * eval_binomial(actual_p, posf, 5000);
  console.log(".")
  return result
}

var experiment = function (costs) {
  return map(function (c) {
    return sum(repeat(1, function () {
      test_cost(c)
    })) / 1
  }, costs)
}

var costs = [0.01,0.2,0.4,0.6,0.8,1.0,1.3,1.6,2.0,2.3,2.6,3.0,3.5,4.0,4.5,5.0,6.0,7.0,8.0,10.0];
var prelim = experiment(costs);

console.log(prelim);

viz.scatter(costs, prelim)
