var generate_bstr = function (len, p) {
 return repeat(len, function() { return flip(p) } );
};

var _step_learn = function (prior, obs, cost, default_p, forward_noise) {
 return function () {
   var sam = sample(prior);
   var p = sam > 0.99 ? 0.99 : sam < 0.01 ? 0.01 : sam;
   observe(Bernoulli({p: p}), obs);
   return forward_noise(cost, p, default_p);
 };
};

var constant_cost_learn = function (prior, dat, cost, forward_noise) {
  var constant_cost_learn_helper = function (prior, dat, cost, forward_noise, default_p) {
    var opts = {method:"rejection", samples:2000};
    if (dat.length == 0) return prior;
    var post = Infer(opts, _step_learn(prior, dat[0], cost, default_p, forward_noise));
    return constant_cost_learn_helper(post, dat.slice(1), cost, forward_noise, default_p);
  }
  return constant_cost_learn_helper(prior, dat, cost, forward_noise, prior);
} 

// Forward noise function(s)
var _reset = function (cost, p, default_p) {
  return flip(1/(cost+1)) ? sample(default_p) : p;
}


var pp = Gaussian({mu:0.5, sigma:0.5}); // Uniform({a:0,b:1});
var d = generate_bstr(16, 0.8);
var posf = constant_cost_learn(pp, d, 5, _reset);

viz.hist(posf)
