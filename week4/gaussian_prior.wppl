/* Construct the data set
 * For general data set constructor, use generate_bstr
 */
var d = [true, true, false, true, true, true, true, false, false, true];

var generate_bstr = function (len, p) {
 return repeat(len, function() { return flip(p) } );
}; // maybe fix the string


/** Gaussian Learner: Inferring the parameter p -- the weight parameter of the coin
*  Stores the mean and variance of p after observing the flipping outcome in array d
*  The mean and sqrt(variance) is stored through mu and sigma in Gaussian parameters
*  Prior is N(0.5,0.5)
*  Let us assume that the "cost" of learning this distribution is 2
*/
var _step_learn = function (prior, obs, prob_reset, default_p) {
 return function () {
   var sam = sample(prior);
   var p = sam > 0.99 ? 0.99 : sam < 0.01 ? 0.01 : sam;
   observe(Bernoulli({p: p}), obs);
   return flip(prob_reset) ? sample(default_p) : p;
 };
};

var pp = Gaussian({mu:0.5, sigma:0.5}); // Uniform({a:0,b:1});
var opts = {method:"rejection", samples:2000};
var pos = Infer(opts, _step_learn(pp, true, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos2 = Infer(opts, _step_learn(pos, true, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos3 = Infer(opts, _step_learn(pos2, true, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos4 = Infer(opts, _step_learn(pos3, false, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos5 = Infer(opts, _step_learn(pos4, true, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos6 = Infer(opts, _step_learn(pos5, true, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos7 = Infer(opts, _step_learn(pos6, false, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos8 = Infer(opts, _step_learn(pos7, true, 0, Gaussian({mu:0.5, sigma:0.5})));
var pos9 = Infer(opts, _step_learn(pos8, true, 0, Gaussian({mu:0.5, sigma:0.5})));
var posf = Infer(opts, _step_learn(pos9, true, 0, Gaussian({mu:0.5, sigma:0.5})));

viz.hist(posf)
