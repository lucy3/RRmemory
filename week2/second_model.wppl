var len = 15
var cost = 4
var true_p = 0.9
var reward = []

var generate_bstr = function (len) {
  var coin = function() {return flip(true_p)};
  return repeat(len, coin);
};

var sequence = generate_bstr(len);
display(sequence)

var observedDataSizes = _.range(len); // save last one for final prediction

// ideal version

var ideal_reward = []

var idealLearner = function(d){
  var today = Infer({method: "enumerate"}, function(){
    var p = uniformDraw([0.1,0.3, 0.5, 0.7,0.9])
    var coin = function() {return flip(p)};
    condition(_.isEqual(d, repeat(d.length, coin))); 
    return p
  })
  var p = sample(today);
  var actual = sequence[d.length]
  var prediction =  flip(p)
  if (prediction == actual) {
      ideal_reward.push(1)
    }
  return today
}

var estimatesIdeal = map(function(N) {
  return expectation(idealLearner(sequence.slice(0,N)))
}, observedDataSizes);

print("Earnings in ideal world")
print(sum(ideal_reward))

viz.line(observedDataSizes, estimatesIdeal);

// noisy version

var noisyLearnerHelper = function(d, yesterday, count){
  if (count >= d.length) { 
    var actual = sequence[d.length]
    var p = sample(yesterday);
    var prediction =  flip(p)
    if (prediction == actual) {
      reward.push(1)
    }
    return yesterday 
  }
  var new_count = count + 1
  var today = Infer({method: "enumerate"}, function(){
    var remembered_model = Infer({method: "enumerate"}, function(){
      var get_noise = function (cost) {
        var n_param = 0.5; // this determines how 
        return Math.exp(- n_param * cost);
      };
      var noise = get_noise(cost)
      var p = sample(yesterday);
      var noisify = function(){  // the more you pay, the less noise you get 
        return flip(noise) ? p*0.9 : p
      }
      var remembered_p = noisify()
      return remembered_p
    })
    var p = sample(remembered_model);
    // observe a sequence of bits equivalent to sequence
    observe(Bernoulli({p: p}), d[count]);
    return p
  })
  return noisyLearnerHelper(d, today, new_count)
}

var noisyLearner = function(d){
  var count = 0
  var day1 = Infer({method: "enumerate"}, function(){
    var p = uniformDraw([0.1,0.3, 0.5, 0.7,0.9])
    // observe a sequence of bits equivalent to sequence
    if (d == 0) { return p }
    observe(Bernoulli({p: p}), d[count]);
    return p
  })
  return noisyLearnerHelper(d, day1, count)
}

var estimatesNoisy = map(function(N) {
  return expectation(noisyLearner(sequence.slice(0,N)))
}, observedDataSizes);

viz.line(observedDataSizes, estimatesNoisy);
print("Spent: ")
print(cost*(len-1))
print("Earned: ")
print(sum(reward))
